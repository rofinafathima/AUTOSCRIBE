// Multilingual Voice Command System for Autoscribe
console.log('Loading multilingual-voice.js...');

// Language configurations
const LANGUAGES = {
    'en': {
        code: 'en-US',
        name: 'English',
        flag: 'ЁЯЗ║ЁЯЗ╕',
        commands: {
            start: ['start exam', 'begin', 'start'],
            next: ['next', 'next question', 'move forward', 'continue'],
            previous: ['previous', 'back', 'go back', 'previous question'],
            read: ['read question', 'repeat', 'read again', 'repeat question'],
            readOptions: ['read options', 'what are the options', 'tell me the options'],
            answerA: ['answer a', 'option a', 'select a', 'a'],
            answerB: ['answer b', 'option b', 'select b', 'b'],
            answerC: ['answer c', 'option c', 'select c', 'c'],
            answerD: ['answer d', 'option d', 'select d', 'd'],
            submit: ['submit', 'submit exam', 'finish', 'end exam'],
            help: ['help', 'commands', 'what can i say']
        },
        messages: {
            welcome: 'Welcome to the exam. You have {duration} minutes to complete {questions} questions.',
            questionPrefix: 'Question {number} of {total}.',
            optionsPrefix: 'The options are:',
            optionFormat: 'Option {letter}, {text}.',
            selected: 'You selected option {letter}, {text}.',
            nextQuestion: 'Moving to next question.',
            previousQuestion: 'Going back to previous question.',
            firstQuestion: 'This is the first question.',
            lastQuestion: 'This is the last question.',
            submitConfirm: 'Are you sure you want to submit your exam?',
            submitted: 'Exam submitted. You scored {score} out of {total} marks.',
            listening: 'Listening...',
            notUnderstood: 'Sorry, I did not understand. Please try again.',
            timeWarning: '{minutes} minutes remaining.',
            timeUp: 'Time is up. Submitting your exam.'
        }
    },
    'ta': {
        code: 'ta-IN',
        name: 'родрооро┐ро┤рпН',
        flag: 'ЁЯЗоЁЯЗ│',
        commands: {
            start: ['родрпЗро░рпНро╡рпИ родрпКроЯроЩрпНроХрпБ', 'родрпКроЯроЩрпНроХрпБ', 'роЖро░роорпНрокро┐'],
            next: ['роЕроЯрпБродрпНродродрпБ', 'роЕроЯрпБродрпНрод роХрпЗро│рпНро╡ро┐', 'роорпБройрпНройрпЗро▒рпБ'],
            previous: ['роорпБроирпНродрпИроп', 'рокро┐ройрпНройро╛ро▓рпН роЪрпЖро▓рпН', 'роорпБроирпНродрпИроп роХрпЗро│рпНро╡ро┐'],
            read: ['роХрпЗро│рпНро╡ро┐ропрпИ рокроЯро┐', 'роорпАрогрпНроЯрпБроорпН рокроЯро┐', 'родро┐ро░рпБроорпНрок рокроЯро┐'],
            readOptions: ['ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпИ рокроЯро┐', 'ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпН роОройрпНрой'],
            answerA: ['рокродро┐ро▓рпН роП', 'ро╡ро┐ро░рпБрокрпНрокроорпН роП', 'роП родрпЗро░рпНро╡рпБ роЪрпЖропрпН', 'роП'],
            answerB: ['рокродро┐ро▓рпН рокро┐', 'ро╡ро┐ро░рпБрокрпНрокроорпН рокро┐', 'рокро┐ родрпЗро░рпНро╡рпБ роЪрпЖропрпН', 'рокро┐'],
            answerC: ['рокродро┐ро▓рпН роЪро┐', 'ро╡ро┐ро░рпБрокрпНрокроорпН роЪро┐', 'роЪро┐ родрпЗро░рпНро╡рпБ роЪрпЖропрпН', 'роЪро┐'],
            answerD: ['рокродро┐ро▓рпН роЯро┐', 'ро╡ро┐ро░рпБрокрпНрокроорпН роЯро┐', 'роЯро┐ родрпЗро░рпНро╡рпБ роЪрпЖропрпН', 'роЯро┐'],
            submit: ['роЪрооро░рпНрокрпНрокро┐', 'родрпЗро░рпНро╡рпИ роорпБроЯро┐', 'роорпБроЯро┐'],
            help: ['роЙродро╡ро┐', 'роХроЯрпНроЯро│рпИроХро│рпН', 'роиро╛ройрпН роОройрпНрой роЪрпКро▓рпНро▓ро▓ро╛роорпН']
        },
        messages: {
            welcome: 'родрпЗро░рпНро╡рпБроХрпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН. {questions} роХрпЗро│рпНро╡ро┐роХро│рпИ роорпБроЯро┐роХрпНроХ роЙроЩрпНроХро│рпБроХрпНроХрпБ {duration} роиро┐рооро┐роЯроЩрпНроХро│рпН роЙро│рпНро│рой.',
            questionPrefix: 'роХрпЗро│рпНро╡ро┐ {number} роорпКродрпНродроорпН {total} роЗро▓рпН.',
            optionsPrefix: 'ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпН:',
            optionFormat: 'ро╡ро┐ро░рпБрокрпНрокроорпН {letter}, {text}.',
            selected: 'роирпАроЩрпНроХро│рпН ро╡ро┐ро░рпБрокрпНрокроорпН {letter} родрпЗро░рпНро╡рпБ роЪрпЖропрпНродрпБро│рпНро│рпАро░рпНроХро│рпН, {text}.',
            nextQuestion: 'роЕроЯрпБродрпНрод роХрпЗро│рпНро╡ро┐роХрпНроХрпБ роЪрпЖро▓рпНроХро┐ро▒родрпБ.',
            previousQuestion: 'роорпБроирпНродрпИроп роХрпЗро│рпНро╡ро┐роХрпНроХрпБ родро┐ро░рпБроорпНрокрпБроХро┐ро▒родрпБ.',
            firstQuestion: 'роЗродрпБ роорпБродро▓рпН роХрпЗро│рпНро╡ро┐.',
            lastQuestion: 'роЗродрпБ роХроЯрпИроЪро┐ роХрпЗро│рпНро╡ро┐.',
            submitConfirm: 'роЙроЩрпНроХро│рпН родрпЗро░рпНро╡рпИ роЪрооро░рпНрокрпНрокро┐роХрпНроХ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│ро╛?',
            submitted: 'родрпЗро░рпНро╡рпБ роЪрооро░рпНрокрпНрокро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ. роирпАроЩрпНроХро│рпН {total} роЗро▓рпН {score} роородро┐рокрпНрокрпЖрогрпНроХро│рпН рокрпЖро▒рпНро▒рпБро│рпНро│рпАро░рпНроХро│рпН.',
            listening: 'роХрпЗроЯрпНроХро┐ро▒родрпБ...',
            notUnderstood: 'рооройрпНройро┐роХрпНроХро╡рпБроорпН, рокрпБро░ро┐ропро╡ро┐ро▓рпНро▓рпИ. роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.',
            timeWarning: '{minutes} роиро┐рооро┐роЯроЩрпНроХро│рпН роорпАродроорпБро│рпНро│рой.',
            timeUp: 'роирпЗро░роорпН роорпБроЯро┐роирпНродродрпБ. роЙроЩрпНроХро│рпН родрпЗро░рпНро╡рпБ роЪрооро░рпНрокрпНрокро┐роХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ.'
        }
    },
    'hi': {
        code: 'hi-IN',
        name: 'рд╣рд┐рдиреНрджреА',
        flag: 'ЁЯЗоЁЯЗ│',
        commands: {
            start: ['рдкрд░реАрдХреНрд╖рд╛ рд╢реБрд░реВ рдХрд░реЗрдВ', 'рд╢реБрд░реВ рдХрд░реЗрдВ', 'рдЖрд░рдВрдн рдХрд░реЗрдВ'],
            next: ['рдЕрдЧрд▓рд╛', 'рдЕрдЧрд▓рд╛ рдкреНрд░рд╢реНрди', 'рдЖрдЧреЗ рдмрдврд╝реЗрдВ'],
            previous: ['рдкрд┐рдЫрд▓рд╛', 'рд╡рд╛рдкрд╕ рдЬрд╛рдПрдВ', 'рдкрд┐рдЫрд▓рд╛ рдкреНрд░рд╢реНрди'],
            read: ['рдкреНрд░рд╢реНрди рдкрдврд╝реЗрдВ', 'рджреЛрд╣рд░рд╛рдПрдВ', 'рдлрд┐рд░ рд╕реЗ рдкрдврд╝реЗрдВ'],
            readOptions: ['рд╡рд┐рдХрд▓реНрдк рдкрдврд╝реЗрдВ', 'рд╡рд┐рдХрд▓реНрдк рдХреНрдпрд╛ рд╣реИрдВ'],
            answerA: ['рдЙрддреНрддрд░ рдП', 'рд╡рд┐рдХрд▓реНрдк рдП', 'рдП рдЪреБрдиреЗрдВ', 'рдП'],
            answerB: ['рдЙрддреНрддрд░ рдмреА', 'рд╡рд┐рдХрд▓реНрдк рдмреА', 'рдмреА рдЪреБрдиреЗрдВ', 'рдмреА'],
            answerC: ['рдЙрддреНрддрд░ рд╕реА', 'рд╡рд┐рдХрд▓реНрдк рд╕реА', 'рд╕реА рдЪреБрдиреЗрдВ', 'рд╕реА'],
            answerD: ['рдЙрддреНрддрд░ рдбреА', 'рд╡рд┐рдХрд▓реНрдк рдбреА', 'рдбреА рдЪреБрдиреЗрдВ', 'рдбреА'],
            submit: ['рдЬрдорд╛ рдХрд░реЗрдВ', 'рдкрд░реАрдХреНрд╖рд╛ рд╕рдорд╛рдкреНрдд рдХрд░реЗрдВ', 'рдЦрддреНрдо рдХрд░реЗрдВ'],
            help: ['рдорджрдж', 'рдЖрджреЗрд╢', 'рдореИрдВ рдХреНрдпрд╛ рдХрд╣ рд╕рдХрддрд╛ рд╣реВрдВ']
        },
        messages: {
            welcome: 'рдкрд░реАрдХреНрд╖рд╛ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИред рдЖрдкрдХреЗ рдкрд╛рд╕ {questions} рдкреНрд░рд╢реНрдиреЛрдВ рдХреЛ рдкреВрд░рд╛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП {duration} рдорд┐рдирдЯ рд╣реИрдВред',
            questionPrefix: 'рдкреНрд░рд╢реНрди {number} рдХреБрд▓ {total} рдореЗрдВ рд╕реЗред',
            optionsPrefix: 'рд╡рд┐рдХрд▓реНрдк рд╣реИрдВ:',
            optionFormat: 'рд╡рд┐рдХрд▓реНрдк {letter}, {text}ред',
            selected: 'рдЖрдкрдиреЗ рд╡рд┐рдХрд▓реНрдк {letter} рдЪреБрдирд╛ рд╣реИ, {text}ред',
            nextQuestion: 'рдЕрдЧрд▓реЗ рдкреНрд░рд╢реНрди рдкрд░ рдЬрд╛ рд░рд╣реЗ рд╣реИрдВред',
            previousQuestion: 'рдкрд┐рдЫрд▓реЗ рдкреНрд░рд╢реНрди рдкрд░ рд╡рд╛рдкрд╕ рдЬрд╛ рд░рд╣реЗ рд╣реИрдВред',
            firstQuestion: 'рдпрд╣ рдкрд╣рд▓рд╛ рдкреНрд░рд╢реНрди рд╣реИред',
            lastQuestion: 'рдпрд╣ рдЕрдВрддрд┐рдо рдкреНрд░рд╢реНрди рд╣реИред',
            submitConfirm: 'рдХреНрдпрд╛ рдЖрдк рд╡рд╛рдХрдИ рдЕрдкрдиреА рдкрд░реАрдХреНрд╖рд╛ рдЬрдорд╛ рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?',
            submitted: 'рдкрд░реАрдХреНрд╖рд╛ рдЬрдорд╛ рдХреА рдЧрдИред рдЖрдкрдиреЗ {total} рдореЗрдВ рд╕реЗ {score} рдЕрдВрдХ рдкреНрд░рд╛рдкреНрдд рдХрд┐рдПред',
            listening: 'рд╕реБрди рд░рд╣рд╛ рд╣реВрдВ...',
            notUnderstood: 'рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдореИрдВ рд╕рдордЭ рдирд╣реАрдВ рдкрд╛рдпрд╛ред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред',
            timeWarning: '{minutes} рдорд┐рдирдЯ рд╢реЗрд╖ рд╣реИрдВред',
            timeUp: 'рд╕рдордп рд╕рдорд╛рдкреНрдд рд╣реЛ рдЧрдпрд╛ рд╣реИред рдЖрдкрдХреА рдкрд░реАрдХреНрд╖рд╛ рдЬрдорд╛ рдХреА рдЬрд╛ рд░рд╣реА рд╣реИред'
        }
    }
};

// Current language state
let currentLanguage = 'en';
let recognition = null;
let synthesis = window.speechSynthesis;
let isVoiceEnabled = false;

// Initialize multilingual voice system
function initMultilingualVoice(language = 'en') {
    currentLanguage = language;
    
    // Initialize speech recognition
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        recognition = new SpeechRecognition();
        recognition.continuous = true;
        recognition.interimResults = false;
        recognition.lang = LANGUAGES[language].code;
        
        recognition.onresult = function(event) {
            const transcript = event.results[event.results.length - 1][0].transcript;
            handleMultilingualVoiceCommand(transcript);
        };
        
        recognition.onerror = function(event) {
            console.error('Speech recognition error:', event.error);
            if (event.error === 'no-speech') {
                speak(LANGUAGES[currentLanguage].messages.notUnderstood);
            }
        };
        
        recognition.onend = function() {
            if (isVoiceEnabled) {
                // Restart recognition if voice mode is still enabled
                try {
                    recognition.start();
                } catch (e) {
                    console.log('Recognition restart prevented:', e);
                }
            }
        };
        
        console.log(`Voice recognition initialized for ${LANGUAGES[language].name}`);
        return true;
    }
    
    console.warn('Speech recognition not supported');
    return false;
}

// Change language
function changeExamLanguage(language) {
    if (!LANGUAGES[language]) {
        console.error('Language not supported:', language);
        return false;
    }
    
    currentLanguage = language;
    
    // Update recognition language
    if (recognition) {
        recognition.lang = LANGUAGES[language].code;
    }
    
    // Save to localStorage
    localStorage.setItem('preferredLanguage', language);
    
    // Speak confirmation
    speak(`Language changed to ${LANGUAGES[language].name}`);
    
    console.log(`Language changed to ${LANGUAGES[language].name}`);
    return true;
}

// Speak text in current language
function speak(text, callback) {
    if (synthesis.speaking) {
        synthesis.cancel();
    }
    
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = LANGUAGES[currentLanguage].code;
    utterance.rate = 0.9;
    utterance.pitch = 1;
    utterance.volume = 1;
    
    if (callback) {
        utterance.onend = callback;
    }
    
    synthesis.speak(utterance);
}

// Format message with variables
function formatMessage(messageKey, variables = {}) {
    let message = LANGUAGES[currentLanguage].messages[messageKey];
    
    for (const [key, value] of Object.entries(variables)) {
        message = message.replace(`{${key}}`, value);
    }
    
    return message;
}

// Handle multilingual voice command
function handleMultilingualVoiceCommand(transcript) {
    const lowerTranscript = transcript.toLowerCase().trim();
    console.log(`Voice command (${currentLanguage}):`, transcript);
    
    const commands = LANGUAGES[currentLanguage].commands;
    
    // Check each command type
    for (const [commandType, commandVariants] of Object.entries(commands)) {
        for (const variant of commandVariants) {
            if (lowerTranscript.includes(variant.toLowerCase())) {
                executeCommand(commandType, lowerTranscript);
                return;
            }
        }
    }
    
    // If no command matched
    speak(LANGUAGES[currentLanguage].messages.notUnderstood);
}

// Execute command
function executeCommand(commandType, transcript) {
    switch (commandType) {
        case 'start':
            if (typeof startExam === 'function') {
                startExam();
            } else if (typeof startMockExam === 'function') {
                startMockExam();
            }
            break;
            
        case 'next':
            if (typeof nextQuestion === 'function') {
                speak(LANGUAGES[currentLanguage].messages.nextQuestion);
                nextQuestion();
            }
            break;
            
        case 'previous':
            if (typeof previousQuestion === 'function') {
                speak(LANGUAGES[currentLanguage].messages.previousQuestion);
                previousQuestion();
            }
            break;
            
        case 'read':
            readCurrentQuestion();
            break;
            
        case 'readOptions':
            readCurrentOptions();
            break;
            
        case 'answerA':
            selectOptionByVoice(0);
            break;
            
        case 'answerB':
            selectOptionByVoice(1);
            break;
            
        case 'answerC':
            selectOptionByVoice(2);
            break;
            
        case 'answerD':
            selectOptionByVoice(3);
            break;
            
        case 'submit':
            if (confirm(LANGUAGES[currentLanguage].messages.submitConfirm)) {
                if (typeof submitExam === 'function') {
                    submitExam();
                } else if (typeof submitMockExam === 'function') {
                    submitMockExam();
                } else if (typeof submitCurrentExam === 'function') {
                    submitCurrentExam();
                }
            }
            break;
            
        case 'help':
            speakHelpCommands();
            break;
    }
}

// Read current question
function readCurrentQuestion() {
    const questionText = document.getElementById('question-text') || 
                        document.getElementById('mock-question-text');
    const questionNumber = document.getElementById('question-number') || 
                          document.getElementById('mock-current-q');
    const totalQuestions = document.getElementById('total-questions') || 
                          document.getElementById('mock-total-questions');
    
    if (questionText && questionNumber && totalQuestions) {
        const message = formatMessage('questionPrefix', {
            number: questionNumber.textContent,
            total: totalQuestions.textContent
        }) + ' ' + questionText.textContent;
        speak(message);
    }
}

// Read current options
function readCurrentOptions() {
    const optionsContainer = document.getElementById('options-container') || 
                            document.getElementById('mock-options-container');
    
    if (optionsContainer) {
        const options = optionsContainer.querySelectorAll('.option-text');
        if (options.length > 0) {
            let message = LANGUAGES[currentLanguage].messages.optionsPrefix + ' ';
            options.forEach((option, idx) => {
                message += formatMessage('optionFormat', {
                    letter: String.fromCharCode(65 + idx),
                    text: option.textContent
                }) + ' ';
            });
            speak(message);
        }
    }
}

// Select option by voice
function selectOptionByVoice(index) {
    // Try different selection functions
    if (typeof selectOption === 'function') {
        selectOption(index);
    } else if (typeof selectExamOption === 'function') {
        selectExamOption(index);
    }
    
    // Speak confirmation
    const optionsContainer = document.getElementById('options-container') || 
                            document.getElementById('mock-options-container');
    if (optionsContainer) {
        const options = optionsContainer.querySelectorAll('.option-text');
        if (options[index]) {
            const message = formatMessage('selected', {
                letter: String.fromCharCode(65 + index),
                text: options[index].textContent
            });
            speak(message);
        }
    }
}

// Speak help commands
function speakHelpCommands() {
    const commands = LANGUAGES[currentLanguage].commands;
    let helpText = 'Available commands: ';
    
    helpText += 'Say ' + commands.next[0] + ' to go to next question. ';
    helpText += 'Say ' + commands.previous[0] + ' to go back. ';
    helpText += 'Say ' + commands.read[0] + ' to hear the question again. ';
    helpText += 'Say ' + commands.answerA[0] + ', ' + commands.answerB[0] + ', ' + 
                commands.answerC[0] + ', or ' + commands.answerD[0] + ' to select an answer. ';
    helpText += 'Say ' + commands.submit[0] + ' to submit your exam.';
    
    speak(helpText);
}

// Toggle voice mode
function toggleVoiceMode() {
    if (!recognition) {
        initMultilingualVoice(currentLanguage);
    }
    
    if (isVoiceEnabled) {
        // Disable voice mode
        recognition.stop();
        isVoiceEnabled = false;
        updateVoiceStatus(false);
        speak('Voice mode disabled');
    } else {
        // Enable voice mode
        try {
            recognition.start();
            isVoiceEnabled = true;
            updateVoiceStatus(true);
            speak('Voice mode enabled');
        } catch (e) {
            console.error('Error starting recognition:', e);
        }
    }
}

// Update voice status UI
function updateVoiceStatus(enabled) {
    const voiceStatus = document.getElementById('voice-status');
    if (voiceStatus) {
        const indicator = voiceStatus.querySelector('.voice-indicator');
        const button = voiceStatus.querySelector('.voice-toggle-btn');
        
        if (enabled) {
            indicator.innerHTML = '<i class="fas fa-microphone"></i><span>Voice Mode: On</span>';
            indicator.style.color = '#10b981';
            if (button) {
                button.innerHTML = '<i class="fas fa-microphone-slash"></i> Disable Voice';
            }
        } else {
            indicator.innerHTML = '<i class="fas fa-microphone-slash"></i><span>Voice Mode: Off</span>';
            indicator.style.color = '#6b7280';
            if (button) {
                button.innerHTML = '<i class="fas fa-microphone"></i> Enable Voice';
            }
        }
    }
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
    // Load preferred language
    const savedLanguage = localStorage.getItem('preferredLanguage') || 'en';
    currentLanguage = savedLanguage;
    
    // Initialize voice system
    initMultilingualVoice(savedLanguage);
    
    console.log('Multilingual voice system initialized');
});

// Export functions
window.initMultilingualVoice = initMultilingualVoice;
window.changeExamLanguage = changeExamLanguage;
window.toggleVoiceMode = toggleVoiceMode;
window.speak = speak;
window.formatMessage = formatMessage;
window.LANGUAGES = LANGUAGES;

console.log('Multilingual voice system loaded successfully!');
